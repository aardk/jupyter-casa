diff --git a/src/PlotHelper.h b/src/PlotHelper.h
index 314daca..563df3b 100644
--- a/src/PlotHelper.h
+++ b/src/PlotHelper.h
@@ -62,7 +62,7 @@ public:
   /**
    * Get Pixel position of a row in the scantable
    **/
-  vector<double> getGridPixel(const int whichrow=0);
+  std::vector<double> getGridPixel(const int whichrow=0);
 
   /**
    * Get the reference direction of grid coordinate (grid center)
@@ -72,7 +72,7 @@ public:
   /**
    * Get the cell size (>0) of the grid coordinate (in radian)
    **/
-  vector<double> getGridCellVal();
+  std::vector<double> getGridCellVal();
 
 
 private:
diff --git a/src/STApplyCal.h b/src/STApplyCal.h
index 2c8134f..0c46a95 100644
--- a/src/STApplyCal.h
+++ b/src/STApplyCal.h
@@ -116,7 +116,7 @@ private:
   casacore::CountedPtr<Interpolator1D<casacore::Double, casacore::Float> > interpolatorS_;
 
   // IF (spw) mapping for Tsys transfer
-  map<casacore::uInt, casacore::Vector<casacore::uInt> > spwmap_;
+  std::map<casacore::uInt, casacore::Vector<casacore::uInt> > spwmap_;
 
   // list of apply tables
   std::vector<STCalSkyTable*> skytable_;
diff --git a/src/STAtmosphere.cpp b/src/STAtmosphere.cpp
index 5275328..5de3a93 100644
--- a/src/STAtmosphere.cpp
+++ b/src/STAtmosphere.cpp
@@ -148,13 +148,13 @@ void STAtmosphere::recomputeAtmosphereModel()
   const double g = 9.81;
   
   const double wvGndSaturationPressure = wvSaturationPressure(itsGndTemperature);
-  const double gndPressure = itsPressure*exp(-M*g/(QC::R.get().getValue()*itsGndTemperature)*
+  const double gndPressure = itsPressure*exp(-M*g/(QC::R().get().getValue()*itsGndTemperature)*
                    (itsObsHeight+0.5*itsLapseRate*itsObsHeight*itsObsHeight/itsGndTemperature));
   for (size_t layer = 0; layer < nLayers(); ++layer) {
        const double height = double(layer)*heightStep;
        itsHeights[layer] = height;
        itsTemperatures[layer] = itsGndTemperature/(1.+itsLapseRate*height/itsGndTemperature);
-       const double pressure = gndPressure * exp(-M*g/(QC::R.get().getValue()*itsGndTemperature)*
+       const double pressure = gndPressure * exp(-M*g/(QC::R().get().getValue()*itsGndTemperature)*
                    (height+0.5*itsLapseRate*height*height/itsGndTemperature));
        itsVapourPressures[layer] = casacore::min(itsGndHumidity*exp(-height/itsWVScale)*wvGndSaturationPressure,
                                              wvSaturationPressure(itsTemperatures[layer]));
@@ -403,7 +403,7 @@ double STAtmosphere::zenithOpacity(double freq) const
        const double nImag = 1e-6*std::imag(dryRefractivity(freq,itsTemperatures[layer],itsDryPressures[layer],
              itsVapourPressures[layer])+vapourRefractivity(freq,itsTemperatures[layer],itsDryPressures[layer],
              itsVapourPressures[layer]));
-       tau += dH*4.*casacore::C::pi/QC::c.get().getValue()*freq*nImag;
+       tau += dH*4.*casacore::C::pi/QC::c().get().getValue()*freq*nImag;
   }
   return tau;
 }
@@ -456,7 +456,7 @@ double STAtmosphere::opacity(double freq, double el) const
        const double nReal = 1. + 1e-6*std::real(n);
        // length increment
        const double dL = dH*nReal/sqrt(nReal*nReal+sineEl*sineEl-1.);
-       tau += dL*4.*casacore::C::pi/QC::c.get().getValue()*freq*nImag;
+       tau += dL*4.*casacore::C::pi/QC::c().get().getValue()*freq*nImag;
   }
   return tau;  
 }
diff --git a/src/STAttr.cpp b/src/STAttr.cpp
index 9b315ce..0538ee6 100644
--- a/src/STAttr.cpp
+++ b/src/STAttr.cpp
@@ -212,7 +212,7 @@ Float STAttr::findJyPerK(Float etaAp, Float D)
   // D in m
   //
 {
-  Double kb = QC::k.getValue(Unit(String("erg/K")));
+  Double kb = QC::k().getValue(Unit(String("erg/K")));
   Float gA = C::pi * D * D / 4.0;
   return (2.0 * 1.0e19 * kb / etaAp / gA);
 }
diff --git a/src/STBaselineTable.h b/src/STBaselineTable.h
index 8a42c2f..48811b4 100644
--- a/src/STBaselineTable.h
+++ b/src/STBaselineTable.h
@@ -63,33 +63,33 @@ public:
 		  int freqid, casacore::Double time, 
 		  bool apply, 
 		  STBaselineFunc::FuncName ftype, 
-		  vector<int> fpar, 
-		  vector<float> ffpar, 
+		  std::vector<int> fpar, 
+		  std::vector<float> ffpar, 
 		  casacore::Vector<casacore::uInt> mask,
-		  vector<float> res,
+		  std::vector<float> res,
 		  float rms,
 		  int nchan, 
 		  float cthres,
 		  int citer, 
 		  float lfthres, 
 		  int lfavg, 
-		  vector<int> lfedge);
+		  std::vector<int> lfedge);
   void appenddata(int scanno, int cycleno, 
 		  int beamno, int ifno, int polno, 
 		  int freqid, casacore::Double time, 
 		  bool apply, 
 		  STBaselineFunc::FuncName ftype, 
 		  int fpar, 
-		  vector<float> ffpar, 
+		  std::vector<float> ffpar, 
 		  casacore::Vector<casacore::uInt> mask,
-		  vector<float> res,
+		  std::vector<float> res,
 		  float rms,
 		  int nchan, 
 		  float cthres,
 		  int citer, 
 		  float lfthres, 
 		  int lfavg, 
-		  vector<int> lfedge);
+		  std::vector<int> lfedge);
   void appenddata(casacore::uInt scanno, casacore::uInt cycleno, 
                   casacore::uInt beamno, casacore::uInt ifno, casacore::uInt polno, 
                   casacore::uInt freqid, casacore::Double time, 
diff --git a/src/STCalTsys.h b/src/STCalTsys.h
index 29fabca..5b792c2 100644
--- a/src/STCalTsys.h
+++ b/src/STCalTsys.h
@@ -38,7 +38,7 @@ namespace asap {
  */
 class STCalTsys : public STCalibration {
 public:
-  STCalTsys(casacore::CountedPtr<Scantable> &s, vector<int> &iflist);
+  STCalTsys(casacore::CountedPtr<Scantable> &s, std::vector<int> &iflist);
   STCalTsys(casacore::CountedPtr<Scantable> &s, casacore::Record &iflist, bool average=false);
 
   ~STCalTsys() {;}
@@ -51,7 +51,7 @@ private:
 			  const casacore::Vector<casacore::Float> &any_data,
 			  const casacore::Vector<casacore::uChar> &channel_flag);
 
-  vector<int> iflist_;
+  std::vector<int> iflist_;
   casacore::Record tsysspw_;
   bool do_average_;
 };
diff --git a/src/STLineFinder.h b/src/STLineFinder.h
index 509a24a..be75172 100644
--- a/src/STLineFinder.h
+++ b/src/STLineFinder.h
@@ -76,7 +76,7 @@ protected:
 
    // An auxiliary object function to test whether two lines have a non-void
    // intersection
-   class IntersectsWith : public std::unary_function<pair<int,int>, bool> {
+   class IntersectsWith : public std::unary_function<std::pair<int,int>, bool> {
        std::pair<int,int> line1;           // range of the first line
                                            // start channel and stop+1
    public:
@@ -102,7 +102,7 @@ protected:
 
    // An auxiliary object function to test whether a specified line
    // is at lower spectral channels (to preserve the order in the line list)
-   class LaterThan : public std::unary_function<pair<int,int>, bool> {
+   class LaterThan : public std::unary_function<std::pair<int,int>, bool> {
        std::pair<int,int> line1;           // range of the first line
                                            // start channel and stop+1
    public:
diff --git a/src/STMath.cpp b/src/STMath.cpp
index 057b88f..19b2d35 100644
--- a/src/STMath.cpp
+++ b/src/STMath.cpp
@@ -294,7 +294,8 @@ STMath::average( const std::vector<CountedPtr<Scantable> >& in,
       uInt const values1[] = { current.asuInt("IFNO"), current.asuInt("BEAMNO"), current.asuInt("POLNO") };
       SingleTypeEqPredicate<uInt, 3> myPred(tin, colNames1, values1);
       CustomTableExprNodeRep myNodeRep(tin, myPred);
-      myNodeRep.link(); // to avoid automatic delete when myExpr is destructed.
+      // (aardk) NB: ExprNodeRep no longer has a reference counter
+      //myNodeRep.link(); // to avoid automatic delete when myExpr is destructed.
       CustomTableExprNode myExpr(myNodeRep);
       Table basesubt = tin(myExpr);
 #else
diff --git a/src/STMath.h b/src/STMath.h
index b0139d8..11f19b4 100644
--- a/src/STMath.h
+++ b/src/STMath.h
@@ -417,10 +417,10 @@ private:
                     const casacore::Vector<casacore::uInt> &rows ) ;
   void calibrateAPEXFS( casacore::CountedPtr<Scantable> &sig,
                         casacore::CountedPtr<Scantable> &ref,
-                        const vector< casacore::CountedPtr<Scantable> > &on,
-                        const vector< casacore::CountedPtr<Scantable> > &sky,
-                        const vector< casacore::CountedPtr<Scantable> > &hot,
-                        const vector< casacore::CountedPtr<Scantable> > &cold,
+                        const std::vector< casacore::CountedPtr<Scantable> > &on,
+                        const std::vector< casacore::CountedPtr<Scantable> > &sky,
+                        const std::vector< casacore::CountedPtr<Scantable> > &hot,
+                        const std::vector< casacore::CountedPtr<Scantable> > &cold,
                         const casacore::Vector<casacore::uInt> &rows ) ;
   void copyRows( casacore::Table &out,
                  const casacore::Table &in,
@@ -431,7 +431,7 @@ private:
                  casacore::Bool copyFlagtra=true,
                  casacore::Bool copyTsys=true ) ;
   casacore::CountedPtr<Scantable> averageWithinSession( casacore::CountedPtr<Scantable> &s,
-                                                    vector<bool> &mask,
+                                                    std::vector<bool> &mask,
                                                     string weight ) ;
 
   bool insitu_;
diff --git a/src/Scantable.h b/src/Scantable.h
index 1ae132d..4bc55c2 100644
--- a/src/Scantable.h
+++ b/src/Scantable.h
@@ -435,12 +435,12 @@ public:
   void setRestFrequencies(vector<double> rf, const vector<std::string>& name = "",
                           const std::string& = "Hz");
   ***/
-  void setRestFrequencies(vector<double> rf,
-                          const vector<std::string>& name = vector<std::string>(1,""),
+  void setRestFrequencies(std::vector<double> rf,
+                          const std::vector<std::string>& name = std::vector<std::string>(1,""),
                           const std::string& = "Hz");
 
   //void setRestFrequencies(const std::string& name);
-  void setRestFrequencies(const vector<std::string>& name);
+  void setRestFrequencies(const std::vector<std::string>& name);
 
   void shift(int npix);
 
@@ -994,7 +994,7 @@ private:
  std::vector<float> doSubtractBaseline(std::vector<float>& spec, std::vector<bool>& mask, const STBaselineFunc::FuncName ftype, std::vector<int>& fpar, std::vector<float>& params, float&rms, std::vector<bool>& finalmask, float clipth, int clipn, bool uself, int irow, float lfth, std::vector<int>& lfedge, int lfavg);
 
  // storage of cubic spline model for various number of channels
- map<size_t, vector< vector<double> > > cubicSplineModelPool_;
+ std::map<size_t, std::vector< std::vector<double> > > cubicSplineModelPool_;
 
 };
 } // namespace
diff --git a/src/ScantableWrapper.h b/src/ScantableWrapper.h
index 0506672..7d796d1 100644
--- a/src/ScantableWrapper.h
+++ b/src/ScantableWrapper.h
@@ -208,7 +208,7 @@ public:
                           const std::string& unit)
     { table_->setRestFrequencies(rf, name, unit); }
 **/
-  void setRestFrequencies(vector<double> rf, const vector<std::string>& name,
+  void setRestFrequencies(std::vector<double> rf, const std::vector<std::string>& name,
                           const std::string& unit)
     { table_->setRestFrequencies(rf, name, unit); }
 
@@ -276,7 +276,7 @@ public:
   std::string getAntennaName() const
     { return table_->getAntennaName(); }
 
-  int checkScanInfo(const vector<int>& scanlist) const
+  int checkScanInfo(const std::vector<int>& scanlist) const
     { return table_->checkScanInfo(scanlist); }
  
   std::vector<double> getDirectionVector(int whichrow) const
