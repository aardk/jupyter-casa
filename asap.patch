diff --git a/src/STApplyCal.h b/src/STApplyCal.h
index 2c8134f..0c46a95 100644
--- a/src/STApplyCal.h
+++ b/src/STApplyCal.h
@@ -116,7 +116,7 @@ private:
   casacore::CountedPtr<Interpolator1D<casacore::Double, casacore::Float> > interpolatorS_;
 
   // IF (spw) mapping for Tsys transfer
-  map<casacore::uInt, casacore::Vector<casacore::uInt> > spwmap_;
+  std::map<casacore::uInt, casacore::Vector<casacore::uInt> > spwmap_;
 
   // list of apply tables
   std::vector<STCalSkyTable*> skytable_;
diff --git a/src/STAtmosphere.cpp b/src/STAtmosphere.cpp
index 5275328..5de3a93 100644
--- a/src/STAtmosphere.cpp
+++ b/src/STAtmosphere.cpp
@@ -148,13 +148,13 @@ void STAtmosphere::recomputeAtmosphereModel()
   const double g = 9.81;
   
   const double wvGndSaturationPressure = wvSaturationPressure(itsGndTemperature);
-  const double gndPressure = itsPressure*exp(-M*g/(QC::R.get().getValue()*itsGndTemperature)*
+  const double gndPressure = itsPressure*exp(-M*g/(QC::R().get().getValue()*itsGndTemperature)*
                    (itsObsHeight+0.5*itsLapseRate*itsObsHeight*itsObsHeight/itsGndTemperature));
   for (size_t layer = 0; layer < nLayers(); ++layer) {
        const double height = double(layer)*heightStep;
        itsHeights[layer] = height;
        itsTemperatures[layer] = itsGndTemperature/(1.+itsLapseRate*height/itsGndTemperature);
-       const double pressure = gndPressure * exp(-M*g/(QC::R.get().getValue()*itsGndTemperature)*
+       const double pressure = gndPressure * exp(-M*g/(QC::R().get().getValue()*itsGndTemperature)*
                    (height+0.5*itsLapseRate*height*height/itsGndTemperature));
        itsVapourPressures[layer] = casacore::min(itsGndHumidity*exp(-height/itsWVScale)*wvGndSaturationPressure,
                                              wvSaturationPressure(itsTemperatures[layer]));
@@ -403,7 +403,7 @@ double STAtmosphere::zenithOpacity(double freq) const
        const double nImag = 1e-6*std::imag(dryRefractivity(freq,itsTemperatures[layer],itsDryPressures[layer],
              itsVapourPressures[layer])+vapourRefractivity(freq,itsTemperatures[layer],itsDryPressures[layer],
              itsVapourPressures[layer]));
-       tau += dH*4.*casacore::C::pi/QC::c.get().getValue()*freq*nImag;
+       tau += dH*4.*casacore::C::pi/QC::c().get().getValue()*freq*nImag;
   }
   return tau;
 }
@@ -456,7 +456,7 @@ double STAtmosphere::opacity(double freq, double el) const
        const double nReal = 1. + 1e-6*std::real(n);
        // length increment
        const double dL = dH*nReal/sqrt(nReal*nReal+sineEl*sineEl-1.);
-       tau += dL*4.*casacore::C::pi/QC::c.get().getValue()*freq*nImag;
+       tau += dL*4.*casacore::C::pi/QC::c().get().getValue()*freq*nImag;
   }
   return tau;  
 }
diff --git a/src/STAttr.cpp b/src/STAttr.cpp
index 9b315ce..0538ee6 100644
--- a/src/STAttr.cpp
+++ b/src/STAttr.cpp
@@ -212,7 +212,7 @@ Float STAttr::findJyPerK(Float etaAp, Float D)
   // D in m
   //
 {
-  Double kb = QC::k.getValue(Unit(String("erg/K")));
+  Double kb = QC::k().getValue(Unit(String("erg/K")));
   Float gA = C::pi * D * D / 4.0;
   return (2.0 * 1.0e19 * kb / etaAp / gA);
 }
diff --git a/src/STLineFinder.h b/src/STLineFinder.h
index 509a24a..be75172 100644
--- a/src/STLineFinder.h
+++ b/src/STLineFinder.h
@@ -76,7 +76,7 @@ protected:
 
    // An auxiliary object function to test whether two lines have a non-void
    // intersection
-   class IntersectsWith : public std::unary_function<pair<int,int>, bool> {
+   class IntersectsWith : public std::unary_function<std::pair<int,int>, bool> {
        std::pair<int,int> line1;           // range of the first line
                                            // start channel and stop+1
    public:
@@ -102,7 +102,7 @@ protected:
 
    // An auxiliary object function to test whether a specified line
    // is at lower spectral channels (to preserve the order in the line list)
-   class LaterThan : public std::unary_function<pair<int,int>, bool> {
+   class LaterThan : public std::unary_function<std::pair<int,int>, bool> {
        std::pair<int,int> line1;           // range of the first line
                                            // start channel and stop+1
    public:
diff --git a/src/Scantable.h b/src/Scantable.h
index 1ae132d..e6100fb 100644
--- a/src/Scantable.h
+++ b/src/Scantable.h
@@ -994,7 +994,7 @@ private:
  std::vector<float> doSubtractBaseline(std::vector<float>& spec, std::vector<bool>& mask, const STBaselineFunc::FuncName ftype, std::vector<int>& fpar, std::vector<float>& params, float&rms, std::vector<bool>& finalmask, float clipth, int clipn, bool uself, int irow, float lfth, std::vector<int>& lfedge, int lfavg);
 
  // storage of cubic spline model for various number of channels
- map<size_t, vector< vector<double> > > cubicSplineModelPool_;
+ std::map<size_t, std::vector< std::vector<double> > > cubicSplineModelPool_;
 
 };
 } // namespace
